import jwt from 'jsonwebtoken';
import { Usuario, Perfil, Sessao } from '../models/index.js';

const TEMPO_INATIVIDADE = 15 * 60 * 1000; // 15 minutos

export const autenticar = async (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  console.log('üîë Token recebido:', token);
  if (!token) return res.status(401).json({ erro: 'Token n√£o fornecido.' });

  try {
    // Decodifica e valida o token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('‚úÖ Token decodificado:', decoded);

    // Busca sess√£o ativa com esse token
    const sessao = await Sessao.findOne({
      where: {
        id_usuario: decoded.id_usuario,
        token: token,
        data_hora_logout: null
      }
    });

    console.log('üìã Sess√£o encontrada:', sessao);

    if (!sessao) {
      console.warn('‚ö†Ô∏è Sess√£o n√£o encontrada ou j√° encerrada.');
      return res.status(401).json({ erro: 'Sess√£o expirada, encerrada ou inv√°lida.' });
    }

    // Verifica inatividade
    const agora = Date.now();
    const ultimoAcesso = sessao.ultimo_acesso
      ? new Date(sessao.ultimo_acesso).getTime()
      : new Date(sessao.data_hora_login).getTime();

    console.log('‚è∞ Agora:', new Date(agora).toISOString());
    console.log('‚è∞ √öltimo acesso:', new Date(ultimoAcesso).toISOString());
    console.log('‚è≥ Diferen√ßa (ms):', agora - ultimoAcesso);
    console.log('‚è≥ Tempo permitido (ms):', TEMPO_INATIVIDADE);

    if (agora - ultimoAcesso > TEMPO_INATIVIDADE) {
      console.warn('‚è≥ Sess√£o expirada por inatividade.');
      // Marca a sess√£o como finalizada por inatividade
      await Sessao.update(
        { data_hora_logout: new Date() },
        { where: { id_sessao: sessao.id_sessao } }
      );
      return res.status(401).json({ erro: 'Sess√£o expirada por inatividade.' });
    }

    // Atualiza o √∫ltimo acesso
    await Sessao.update(
      { ultimo_acesso: new Date() },
      { where: { id_sessao: sessao.id_sessao } }
    );
    console.log('‚úÖ √öltimo acesso atualizado para agora.');

    // Busca usu√°rio e perfis
    const usuario = await Usuario.findByPk(decoded.id_usuario, {
      include: [{
        model: Perfil,
        as: 'perfis',
        through: { attributes: [] }
      }]
    });

    if (!usuario) {
      console.warn('‚ùå Usu√°rio n√£o encontrado.');
      return res.status(403).json({ erro: 'Usu√°rio n√£o encontrado.' });
    }

    if (!usuario.status) {
      console.warn('‚ùå Usu√°rio desativado.');
      return res.status(403).json({ erro: 'Sua conta est√° desativada. Acesso negado.' });
    }

    // Anexa ao req para uso nas rotas protegidas
    req.usuario = {
      id_usuario: usuario.id_usuario,
      nome: usuario.nome,
      perfis: usuario.perfis.map(p => p.id_perfil)
    };

    next();
  } catch (error) {
    console.error('‚ùå Erro na autentica√ß√£o:', error);
    return res.status(401).json({ erro: 'Token inv√°lido ou expirado.' });
  }
};

export async function validarSessao(req, res) {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    console.log('üîë Validar sess√£o - Token recebido:', token);
    if (!token) return res.status(401).json({ erro: 'Token n√£o fornecido.' });

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('‚úÖ Validar sess√£o - Token decodificado:', decoded);

    const sessao = await Sessao.findOne({
      where: {
        id_usuario: decoded.id_usuario,
        token,
        data_hora_logout: null
      }
    });

    console.log('üìã Validar sess√£o - Sess√£o encontrada:', sessao);

    if (!sessao) {
      console.warn('‚ö†Ô∏è Validar sess√£o - Sess√£o expirada ou encerrada.');
      return res.status(401).json({ erro: 'Sess√£o expirada ou encerrada.' });
    }

    // (Opcional) Atualiza o √∫ltimo acesso
    sessao.ultimo_acesso = new Date();
    await sessao.save();
    console.log('‚úÖ Validar sess√£o - √öltimo acesso atualizado.');

    return res.status(200).json({
      mensagem: 'Sess√£o v√°lida.',
      usuario: {
        id_usuario: decoded.id_usuario,
        email: decoded.email,
        perfis: decoded.perfis
      }
    });
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o de sess√£o:', error);
    return res.status(401).json({ erro: 'Sess√£o inv√°lida ou expirada.' });
  }
}
